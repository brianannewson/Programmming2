let shapes = []; 
let numShapes = 15;  
let startTime;  
let timeElapsed = 0;  
let transitionTime = 5 * 1000; 
let totalChanges = 15; 
let changeCounter = 5; 
let transitionComplete = false;  

function setup() {
  createCanvas(800, 800);
  startTime = millis();  

  // Initialize random shapes with position, size, and motion properties
  for (let i = 0; i < numShapes; i++) {
    let shape = {
      x: random(width),
      y: random(height),
      size: random(30, 80),
      speedX: random(-5, 5),
      speedY: random(-5, 5),
      color: color(random(255), random(150, 255), random(100, 255)),  // Random initial color (vivid and warm)
      shapeType: random([0, 1, 2, 3]),
      isTransitioning: false, 
      lifeCycle: 0, 
      isVisible: true,  
      changeCounter: 0, 
      alpha: 255,
    };
    shapes.push(shape);
  }
}

function draw() {
  // Calculate time elapsed
  timeElapsed = millis() - startTime;

  // Transition from chaos to calm after 5 seconds
  if (timeElapsed > transitionTime) {
    transitionComplete = true;
  }

  // Clear the background with a calming color
  background(240, 240, 255);

  // Update and draw shapes
  for (let i = 0; i < shapes.length; i++) {
    let shape = shapes[i];

    // If transition is complete, slow down the shapes
    if (transitionComplete) {
      // Gradually reduce speed until it's very small
      shape.speedX *= 0.98;  // Gradually slow down
      shape.speedY *= 0.98;  // Gradually slow down

      // If the shape is moving very slowly, stop it completely before fading
      if (abs(shape.speedX) < 0.05 && abs(shape.speedY) < 0.05) {
        shape.speedX = 0;
        shape.speedY = 0;
      }

      // Make the shape slowly disappear after slowing down
      if (frameCount % 60 === 0 && shape.isVisible) {  // Remove one shape every second
        shape.alpha -= 15;  // Decrease opacity over time
      }

      // If opacity is below a threshold, set it to invisible
      if (shape.alpha <= 0) {
        shape.isVisible = false;
      }
    }

    // Smooth transition of each shape's life cycle from chaotic to calm
    if (!transitionComplete) {
      shape.lifeCycle += 0.005;  // Gradual transition from chaotic state to calm
      if (shape.lifeCycle > 1) shape.lifeCycle = 1;  // Cap at 1 for smooth transition
    }

    // Change shape every frame until it has changed 10 times
    if (shape.changeCounter < totalChanges) {
      let chanceToChange = 0.05;  // 5% chance of changing each frame
      if (random() < chanceToChange) {
        shape.shapeType = random([0, 1, 2, 3]);  // Randomly choose a new shape type
        shape.changeCounter++;  // Increment the shape change counter
      }
    }

    // Transition to a more permanent shape after 10 shape changes
    if (shape.changeCounter >= totalChanges && shape.isVisible) {
      if (!shape.isTransitioning) {
        // After 10 changes, stop transitioning and settle on a shape (final shape type)
        shape.shapeType = 3;  // Set to Trapezoid
        shape.isTransitioning = true;
      }
    }

    // Transition the shape size based on its life cycle
    let sizeMultiplier = map(shape.lifeCycle, 0, 1, 1, 1.5);  // Shapes start smaller and get larger
    shape.size = 60 * sizeMultiplier;

    // Set the color with the current alpha (opacity)
    let colorTransition = map(shape.lifeCycle, 0, 1, 0, 1); // Linear transition factor
    let hueStart = random(10, 40);  // Warm hues, reds to oranges
    let hueEnd = random(190, 220);  // Cool hues, blues to greens
    let hue = lerp(hueStart, hueEnd, colorTransition);
    let saturation = lerp(0.8, 0.5, colorTransition); // Warm colors are more saturated
    let brightness = lerp(0.9, 0.7, colorTransition); // Brightness goes down as we transition to cooler colors

    // Use HSB color mode for smooth color transitions
    colorMode(HSB, 360, 1, 1);
    shape.color = color(hue, saturation, brightness);
    colorMode(RGB, 255); // Reset back to RGB mode after HSB manipulation

    // Apply the color with the current alpha (opacity)
    fill(shape.color.levels[0], shape.color.levels[1], shape.color.levels[2], shape.alpha);
    noStroke();

    // Draw different shapes based on the shapeType
    if (shape.shapeType === 0) {
      ellipse(shape.x, shape.y, shape.size, shape.size);  // Circle
    } else if (shape.shapeType === 1) {
      rect(shape.x - shape.size / 2, shape.y - shape.size / 2, shape.size, shape.size);  // Square
    } else if (shape.shapeType === 2) {
      drawTriangle(shape.x, shape.y, shape.size);  // Triangle
    } else if (shape.shapeType === 3) {
      drawTrapezoid(shape.x, shape.y, shape.size);  // Trapezoid
    }

    // Move the shape around
    shape.x += shape.speedX;
    shape.y += shape.speedY;

    // Keep shapes within the canvas boundaries
    if (shape.x > width || shape.x < 0) shape.speedX *= -1;
    if (shape.y > height || shape.y < 0) shape.speedY *= -1;

    // If the shape is the pink trapezoid, move it toward the center but still allow movement
    if (shape.isVisible && shape.shapeType === 3 && shape.alpha > 0) {
      let targetX = width / 2;
      let targetY = height / 2;
      let speedFactor = 0.1; // Control how quickly the trapezoid moves to the center

      // Smoothly move the trapezoid toward the center
      shape.speedX += (targetX - shape.x) * speedFactor;
      shape.speedY += (targetY - shape.y) * speedFactor;
    }
  }

  // After all shapes have slowed down, leave only one pink trapezoid at the center
  if (shapes.filter(s => s.isVisible).length === 1) {
    let finalShape = shapes.find(s => s.isVisible);
    finalShape.color = color(255, 182, 193);  // Change color to pink
    finalShape.shapeType = 3;  // Change to a trapezoid
    finalShape.size = 100;  // Make it larger
    finalShape.x = width / 2;
    finalShape.y = height / 2;
  }
}

// Function to draw a triangle
function drawTriangle(x, y, size) {
  beginShape();
  vertex(x, y - size / 2);
  vertex(x - size / 2, y + size / 2);
  vertex(x + size / 2, y + size / 2);
  endShape(CLOSE);
}

// Function to draw a trapezoid
function drawTrapezoid(x, y, size) {
  let h = size * 0.6;
  beginShape();
  vertex(x - size / 2, y + h / 2);  // Bottom left
  vertex(x + size / 2, y + h / 2);  // Bottom right
  vertex(x + size * 0.3, y - h / 2);  // Top right
  vertex(x - size * 0.3, y - h / 2);  // Top left
  endShape(CLOSE);
}
